library(OptimalRDTinR)
hello()
library(OptimalRDTinR)
pi_MCSim_beta(5000,10,1,1)
pi_MCSim_dirichlet(1,10,c(1,1,1))[1,]
pi_MCSim_beta(5000,10,1,1)[1,]
pi_MCSim_beta(5000,10,1,1)[1]
pi_MCSim_beta(5000,10,1,1)
library(OptimalRDTinR)
?pi_MCSim_beta()
??pi_MCSim_beta()
library(OptimalRDTinR)
library(OptimalRDTinR)
install.packages("Rtools")
install.packages("Rtools")
library(gtools)
library(OptimalRDTinR)
?hello
install.packages("roxygen2")
install.packages("devtools")
library(OptimalRDTinR)
library(OptimalRDTinR)
setwd("G:/My Drive/Career_Development/Coding_Profiles/Github_Public/OptimalRDT_R/OptimalRDTinR")
devtools::document()
library(OptimalRDTinR)
library(OptimalRDTinR)
bIndicator(pi = 0.1, R = 0.9)
bIndicator(pi = 0.2, R = 0.9)
bIndicator(pi = 0.1, R = 0.9)
bIndicator <- function(pi,R){
if(pi <= 1-R)
return(1)
else
return(0)
}
bIndicator(pi = 0.1, R = 0.9)
bIndicator <- function(pi,R){
if(pi <= 1-R){
return(1)
}
else
return(0)
}
bIndicator(pi = 0.1, R = 0.9)
bIndicator(0.1, 0.9)
bIndicator()
?bIndicator()
devtools::document()
bIndicator(0.1, 0.9)
bIndicator(0.05, 0.9)
bIndicator(0.1, 0.9)
library(OptimalRDTinR)
bIndicator(0.1, 0.9)
pi = 0.1
R = 0.9
pi <= (1 - R)
0.1 <= (1 - 0.9)
0.1 <= 0.1
(1 - 0.9)
tmp = 1 - R
tmp
######define the indicator function
bIndicator <- function(pi,R){
tmp <- 1 - R
if(pi <= tmp){
return(1)
}
else
return(0)
}
bIndicator(0.1, 0.9)
######define the indicator function
bIndicator <- function(pi,R){
if(pi<=(1 - R)){
return(1)
}
else
return(0)
}
bIndicator(0.1, 0.9)
######define the indicator function
bIndicator <- function(pi,R){
if(pi<(1 - R)|pi==(1 - R)){
return(1)
}
else
return(0)
}
bIndicator(0.1, 0.9)
######define the indicator function
bIndicator <- function(pi, R){
if(pi<(1 - R)|pi==(1 - R)){
return(1)
}
else{
return(0)
}
}
bIndicator(0.1, 0.9)
pi<(1 - R)|pi==(1 - R)
######define the indicator function
bIndicator <- function(pi, R){
if(pi<(1 - R)|pi==(1 - R)){
return(1)
}
else{
return(0)
}
}
bIndicator(pi = 0.1, R = 0.9)
pi
######define the indicator function
bIndicator <- function(Pi, R){
if(Pi<(1 - R)|Pi==(1 - R)){
return(1)
}
else{
return(0)
}
}
bIndicator(pi = 0.1, R = 0.9)
bIndicator(Pi = 0.1, R = 0.9)
pi = 0.1
pi
R = 0.9
if(pi<(1 - R)|pi==(1 - R)){
return(1)
}
else{
return(0)
}
if(pi<(1 - R)|pi==(1 - R)){
print(1)
}
else{
print(0)
}
pi<(1 - R)|pi==(1 - R)
if(pi<(1 - R)|pi==(1 - R)){
print(1)
}else{
print(0)
}
if(pi<=(1 - R)){
print(1)
} else {
print(0)
}
if(pi<=(1-R)){
print(1)
} else {
print(0)
}
pi<=(1-R)
pi
0.1<=(1-0.9)
0.1<=(1.0-0.9)
1-0.9
0.1<=numeric(1.0-0.9)
0.1<=as.numeric(1-0.9)
0.1<=0.1
0.1==0.1
pi<(1-R)
pi==(1-R)
pi>(1-R)
pi
p = 0.1
p>(1-R)
0.1 > 0.1
help("<=")
pi <- 0.1
R <- 0.9
pi>(1-R)
(1-R)
pi
a = 0.1
b = 0.1
a <= b
b = 0.9
a <= 1 - b
a <= (1 - b)
1-b
b = 0.11
a = 0.11
b = 0.89
a <= (1 - b)
a
1-b
a = round(0.11,2)
b = round(0.89,2)
a <= (1 - b)
a
b
1-0.9
b = 0.9
b = 0.91
pi = 0.05
R = 0.9
bIndicator(pi = 0.05, R = 0.9)
######define the indicator function
bIndicator <- function(pi, R){
if(pi<=(1-R)){
print(1)
} else {
print(0)
}
}
######define the indicator function
bIndicator <- function(pi, R){
if(pi<=(1-R)){
return(1)
} else {
return(0)
}
}
bIndicator(pi = 0.05, R = 0.9)
library(OptimalRDTinR)
?bIndicator
?hello
?pi_MCSim_beta()
library(OptimalRDTinR)
?bIndicator
devtools::document()
?bIndicator
library(OptimalRDTinR)
?bIndicator
devtools::document()
?bIndicator
devtools::document()
?pi_MCSim_beta()
devtools::document()
?pi_MCSim_beta()
pi_MCSim_dirichlet(5000,10,c(1,1,1))
devtools::document()
?pi_MCSim_beta()
devtools::document()
library(OptimalRDTinR)
?bIndicator
bcore(10, 2, 0.2)
bcore <- function(n,c,pi){
return(sum(dbinom(c(0:c),n,pi)))
}
bcore(10, 2, 0.2)
bconsumerrisk <- function(n, c, pi, R){
tmp <- pbinom(c, n, pi)
sum1 <- t(matrix(tmp))%*%matrix(sapply(pi, bIndicator, R))
sum2 <- sum(tmp)
return(1 - sum1/sum2)
}
pi <- pi_MCSim_beta(5000,10,1,1)
bconsumerrisk(10, 2, pi, 0.8)
bproducerrisk <- function(n,c,pi,R){
tmp <- 1-pbinom(c,n,pi)
sum1<-t(matrix(tmp))%*%matrix(sapply(pi,bIndicator,R))
sum2<-sum(tmp)
return(sum1/sum2)
}
bproducerrisk(n = 10, c = 2, pi, R = 0.8)
bacceptprob <- function(n, c, pi){
return(mean(pbinom(c, n, pi)))
}
bacceptprob(n = 10, c = 2, pi = pi)
brejectprob(n = 10, c = 2, pi = pi)
brejectprob <- function(n, c, pi){
return(mean(1 - pbinom(c, n, pi)))
}
brejectprob(n = 10, c = 2, pi = pi)
?bcore
?OptimalRDTinR
??OptimalRDTinR
devtools::check()
pi_MCSim_dirichlet <- function(M, seed, par){
requireNamespace(gtools)
set.seed(seed)
return(rdirichlet(M, par))
}
pi_MCSim_dirichlet(M = 5000, seed = 10, par = c(1, 1, 1))
pi_MCSim_dirichlet <- function(M, seed, par){
requireNamespace(gtools, quietly = TRUE)
set.seed(seed)
return(rdirichlet(M, par))
}
pi_MCSim_dirichlet(M = 5000, seed = 10, par = c(1, 1, 1))
pi_MCSim_dirichlet <- function(M, seed, par){
requireNamespace("gtools", quietly = TRUE)
set.seed(seed)
return(rdirichlet(M, par))
}
pi_MCSim_dirichlet(M = 5000, seed = 10, par = c(1, 1, 1))
requireNamespace("gtools")
pi_MCSim_dirichlet(M = 5000, seed = 10, par = c(1, 1, 1))
pi_MCSim_dirichlet <- function(M, seed, par){
requireNamespace("gtools")
set.seed(seed)
return(rdirichlet(M, par))
}
pi_MCSim_dirichlet(M = 5000, seed = 10, par = c(1, 1, 1))
pi_MCSim_dirichlet <- function(M, seed, par){
requireNamespace("gtools")
set.seed(seed)
return(gtools::rdirichlet(M, par))
}
pi_MCSim_dirichlet(M = 5000, seed = 10, par = c(1, 1, 1))
0.4925217968 0.5730923335 0.9148640311
?rbeta
?pnorm
?pbinom
library(OptimalRDTinR)
library(OptimalRDTinR)
?dbinom
?sapply
library(OptimalRDTinR)
pi <- pi_MCSim_beta(M = 5000, seed = 10, a = 1, b = 1)
bconsumerrisk(n = 10, c = 2, pi = pi, R = 0.8)
library(OptimalRDTinR)
pi <- pi_MCSim_beta(M = 5000, seed = 10, a = 1, b = 1)
boptimal_n <- function(c, pi, R, thres_CR){
n <- c + 1
CR <- bconsumerrisk(n, c, pi, R)
while (CR > thres_CR){
n <- n + 1
CR <- bconsumerrisk(n, c, pi, R)
}
return(n)
}
boptimal_n(c = 2, pi = pi, R = 0.8, thres_CR = 0.05)
bcost_WS(Cw = 10, N = 1, n = 10, c = 1, pi = pi)
bcost_WS <- function(Cw, N, n, c, pi){
expected <- sum(pbinom(c, n, pi) * pi) / sum(pbinom(c, n, pi))
return(c(expected, Cw * N * expected))
}
bcost_WS(Cw = 10, N = 1, n = 10, c = 1, pi = pi)
bcost_expected <- function(Cf, Cv, n, G, Cw, N, c, pi){
return(bcost_RDT(Cf, Cv, n) +
bcost_RG(G) * (1 - bacceptprob(n, c, pi)) +
bcost_WS(Cw, N, n, c, pi)[2] * bacceptprob(n, c, pi))
}
bcost_expected(Cf = 10, Cv = 10, n = 10, G = 100000, Cw = 10, N = 1, c = 1, pi = pi)
bcost_RDT <- function(Cf, Cv, n){
return(Cf + Cv * n)
}
bcost_RG <- function(G){
return(G)
}
bcost_expected <- function(Cf, Cv, n, G, Cw, N, c, pi){
return(bcost_RDT(Cf, Cv, n) +
bcost_RG(G) * (1 - bacceptprob(n, c, pi)) +
bcost_WS(Cw, N, n, c, pi)[2] * bacceptprob(n, c, pi))
}
bcost_expected(Cf = 10, Cv = 10, n = 10, G = 100000, Cw = 10, N = 1, c = 1, pi = pi)
?mapply
boptimal_cost <- function(Cf, Cv, nvec, G, Cw, N, Rvec, cvec, pi, thres_CR){
#exapnd all possible combinations of n, c, R
n_R_c_vecs <- expand.grid(nvec, Rvec, cvec)
#Generate expected overall cost
costvec <- mapply(bcost_expected, n = n_R_c_vecs[,1], c = n_R_c_vecs[,3],
MoreArgs = list(Cf = Cf, Cv = Cv, G = G, Cw = Cw, N = N, pi = pi))
#Generate consumer's risk
CRvec <- mapply(bconsumerrisk, n = n_R_c_vecs[,1], c = n_R_c_vecs[,3], R = n_R_c_vecs[,2],
MoreArgs = list(pi = pi))
#Generate optimal test plans
optimal_index <- which(costvec == min(costvec[which(CRvec <= thres_CR)]))
n_optimal <- n_R_c_vecs[optimal_index, 1]
R_optimal <- n_R_c_vecs[optimal_index, 2]
c_optimal <- n_R_c_vecs[optimal_index, 3]
n_c_optimal <- n_R_c_vecs[optimal_index,c(1, 3)]
#Generate acceptable probabilities for optimal test plans
AP_optimal <- mapply(bacceptprob, n = n_c_optimal[, 1], c = n_c_optimal[, 2],
MoreArgs = list(pi = pi))
#
CR_optimal <- CRvec[optimal_index]
cost_optimal <- costvec[optimal_index]
#
results <- cbind(n_optimal, R_optimal, c_optimal, AP_optimal, CR_optimal, cost_optimal)
colnames(results) <- c('n', 'R', 'c', 'AP', 'CR', 'Optimal Cost')
return(results)
}
nvec <- seq(0,10,1)
Rvec <- seq(0.8,0.85,0.01)
cvec <- seq(0,2,1)
boptimal_cost(Cf=10, Cv=10 ,nvec, G=100, Cw=10, N=100, Rvec, cvec, pi, thres_CR=0.5)
library(OptimalRDTinR)
boptimal_cost(Cf=10, Cv=10 ,nvec, G=100, Cw=10, N=100, Rvec, cvec, pi, thres_CR=0.5)
?expand.grid
library(OptimalRDTinR)
?boptimal_cost
?bcost_expected
?bcost_WS
library(OptimalRDTinR)
devtools::check()
devtools::use_mit_license()
boptimal_cost(Cf = 10, Cv = 10, nvec = nvec, G = 100, Cw = 10, N = 100, Rvec = Rvec, cvec = cvec, pi = pi, thres_CR = 0.5);
devtools::check()
devtools::check()
devtools::check()
library(OptimalRDTinR)
library(OptimalRDTinR)
library(OptimalRDTinR)
MPCum_core<-function(n, cvec, pivec){
if(n <= sum(cvec)){
return(0)
}
else {
if(length(cvec) == 1){
return(sum(apply(cbind(seq(0, cvec, 1),n - seq(0, cvec, 1)), 1, dmultinom, prob = pivec)))
}
else if(length(cvec) == 2){
sum2 <- rep(NA, length(0:(cvec[2])))
if(cvec[1] == 0 & cvec[2] == 0){
return(dmultinom(c(cvec[1], cvec[2], n - cvec[1] - cvec[2]), prob = pivec))
}
else
if(cvec[1] == 0 & cvec[2] != 0){
for(j in 0:(cvec[2])){
sum2[j+1] <- dmultinom(c(cvec[1], j, n - cvec[1] - j), prob = pivec)
}
return(sum(sum2))
}
else
if(cvec[1] != 0){
sum1 <- rep(NA, length(0:(cvec[1])))
for (i in 0:cvec[1]){
sum2 <- rep(NA, length(0:(cvec[2] + cvec[1]- i)))
for(j in 0:(cvec[2] + cvec[1] - i)){
sum2[j+1] <- dmultinom(c(i, j, n-i-j), prob = pivec)
}
sum1[i+1] <- sum(sum2)
}
return(sum(sum1))
}
}
else{
cum_cvec <- cumsum(cvec)
tmp <- melt(outer(0:(cum_cvec[2]), 0:cum_cvec[1], "-"))
tmp <- tmp[tmp$value >= 0, ][ , -1]
tmp <- tmp %>% left_join(cbind.data.frame(Var1 = c(0:cum_cvec[1]), Var2 = c(1:length(0:cum_cvec[1]))), by = 'Var2')
tmp <- subset(tmp, select = -Var2)
for(k in 3:length(cum_cvec)){
tmp.old <- tmp
tmp <- melt(outer(0:cum_cvec[k], rowSums(tmp.old), "-"))
tmp <- tmp[tmp$value >= 0, ][ , -1]
tmp <- tmp %>% left_join(cbind.data.frame(tmp.old, Var2 = c(1:dim(tmp.old)[1])), by = 'Var2')
tmp <- subset(tmp, select = -Var2)
}
tmp <- tmp[ , rev(colnames(tmp))]
return(sum(apply(cbind(tmp, n - rowSums(tmp)), 1, dmultinom, prob = pivec)))
}
}
}
pi <- pi_MCSim_dirichlet(M = 5000, seed = 10, par = c(1, 1, 1))
MPCum_core(n = 10, cvec = c(1, 1), pivec = pi[1, ]);
